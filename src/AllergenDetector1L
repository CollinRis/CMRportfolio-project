import components.set.Set;
import components.set.Set1L;

/**
 * Kernel implementation of the AllergenDetector component using Set1L.
 *
 * Convention:
 *  - No null or empty strings are allowed in the set.
 *
 * Correspondence:
 *  - This AllergenDetector's trackedAllergens corresponds to the logical set
 *    of allergen strings the user wants to avoid.
 */
public class AllergenDetector1L extends AllergenDetectorSecondary {

    private Set<String> trackedAllergens;

    /**
     * Default constructor.
     * @ensures this.trackedAllergens is initialized to an empty Set.
     */
    public AllergenDetector1L() {
        this.trackedAllergens = new Set1L<>();
    }

    @Override
    public void addAllergen(String allergen) {
        assert allergen != null : "Violation of: allergen is not null";
        assert !allergen.isEmpty() : "Violation of: allergen is not empty";
        if (!this.trackedAllergens.contains(allergen.toLowerCase())) {
            this.trackedAllergens.add(allergen.toLowerCase());
        }
    }

    @Override
    public void removeAllergen(String allergen) {
        assert allergen != null : "Violation of: allergen is not null";
        assert this.trackedAllergens.contains(allergen.toLowerCase()) : "Violation of: allergen exists in set";
        this.trackedAllergens.remove(allergen.toLowerCase());
    }

    @Override
    public boolean containsAllergen(String ingredientList) {
        assert ingredientList != null : "Violation of: ingredientList is not null";
        String[] ingredients = ingredientList.toLowerCase().split(", ");
        for (String ingredient : ingredients) {
            if (this.trackedAllergens.contains(ingredient)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public Set<String> getDetectedAllergens(String ingredientList) {
        assert ingredientList != null : "Violation of: ingredientList is not null";
        Set<String> detected = new Set1L<>();
        String[] ingredients = ingredientList.toLowerCase().split(", ");
        for (String ingredient : ingredients) {
            if (this.trackedAllergens.contains(ingredient)) {
                detected.add(ingredient);
            }
        }
        return detected;
    }

    @Override
    public AllergenDetector1L newInstance() {
        return new AllergenDetector1L();
    }

    @Override
    public void clear() {
        this.trackedAllergens.clear();
    }

    @Override
    public void transferFrom(AllergenDetectorKernel source) {
        assert source instanceof AllergenDetector1L : "Violation of: source is AllergenDetector1L";
        AllergenDetector1L localSource = (AllergenDetector1L) source;
        this.trackedAllergens = localSource.trackedAllergens;
        localSource.trackedAllergens = new Set1L<>();
    }
}
